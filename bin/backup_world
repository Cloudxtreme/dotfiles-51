#!/usr/bin/env bash
#
#  master backup script
#  --------------------
#  This script first synchronizes the local Dropbox directory to the remote NAS.
#  Then it synchronizes the remote NAS to the local backup HDD.  It uses `rsync`
#  for file transfer, which will: generate an incremental file list, delete
#  extraneous files on the destination, and copy files that have changed in
#  size or last-modified time between the destination and receiver.
#

set -e

HDD="/mnt/blue/"
NAS="/run/user/${UID}/gvfs/smb-share:server=bytez,share=public,user=cgoldberg/"
DROPBOX="${HOME}/Dropbox/"

SEP="----------------------------------------------------------------"


check_configuration () {
    echo "checking configuration..."
    if [[ "$HOSTNAME" != "collosus" ]]; then
        echo "error: this script can only be run on colossus!"; exit 1
    fi

    if [[ ! -d "$NAS" ]]; then
        echo "error: can't find mount point for remote NAS: ${NAS}!"; exit 1
    fi

    if [[ ! -d "$HDD" ]]; then
        echo "error: can't find mount point for local HDD backup: ${HDD}!"; exit 1
    fi

    if [[ ! -d "$DROPBOX" ]]; then
        echo "error: can't find local Dropbox directory: ${DROPBOX}"; exit 1
    fi
}


# stop Dropbox and purge local cache
purge_dropbox_cache () {
    if ! dropbox running; then
        dropbox stop && sleep 2
    fi
    local cache_dir="${DROPBOX}.dropbox.cache/"
    if [[ -d "$cache_dir" ]]; then
        du -ah "$cache_dir"
        echo "purging local Dropbox cache..."
        rm -rf "$cache_dir"
        sleep 1
    fi
}


display_storage_stats () {
    echo "storage stats:"
    echo
    df --sync --type=ext4 --block-size=G
    local nas_stats=$(tree -a "$NAS" | tail -n 1)
    local hdd_stats=$(tree -a "$HDD" | tail -n 1)
    echo
    echo "remote NAS: ${nas_stats}"
    echo "local HDD: ${hdd_stats}"
}


main () {
    echo "starting master backup job..."
    if [[ ! -d "$NAS" ]]; then
        gvfs-mount smb://cgoldberg@bytez/public  # requires user in local keychain
    fi
    check_configuration
    echo "$SEP"
    purge_dropbox_cache
    echo "$SEP"
    echo "syncing local Dropbox to remote NAS..."
    # Note: We disable preserving permissions when rsyncing.  Rather than
    # using rsync's --archive option (which is equivalent to -rlptgoD), we
    # pass individual rsync options so the --perms option can be excluded.
    rsync \
        --delete \
        --human-readable \
        --links \
        --progress \
        --recursive \
        --safe-links \
        --times \
        --info=progress2 \
        "$DROPBOX" \
        "${NAS}Dropbox_Backup"
    echo "$SEP"
    echo "syncing remote NAS to local HDD..."
    rsync \
        --delete \
        --human-readable \
        --links \
        --progress \
        --recursive \
        --safe-links \
        --times \
        --info=progress2 \
        "$NAS" \
        "$HDD"
    echo "$SEP"
    sync
    display_storage_stats
    echo "$SEP"
    echo "done"
}

main
