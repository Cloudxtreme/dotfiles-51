#!/usr/bin/env bash
#
#  master backup script
#  --------------------
#    * synchronizes local Dropbox directory to remote NAS
#    * synchronizes remote NAS to local backup HDD
#
#  This script uses `rsync` for file transfer.
#  This first does a recursive scan and generates an incremental list of files
#  that have changed between the source and destination.  Then it deletes
#  extraneous files on the destination.  Finally, it copies new files and
#  files that have changed (in size or last-modified time) between the source
#  and destination.
#


set -e


DROPBOX="${HOME}/Dropbox"
HDD="/mnt/blue"
NAS="/run/user/${UID}/gvfs/smb-share:server=bytez,share=public,user=cgoldberg"
SEP="----------------------------------------------------------------"


check_configuration () {
    echo "checking configuration..."
    if [[ "${HOSTNAME}" != "collosus" ]]; then
        echo "error: this script can only be run on colossus!"; exit 1
    fi
    if [[ ! -d "${NAS}" ]]; then
        echo "error: can't find mount point for remote NAS: ${NAS}!"; exit 1
    fi
    if [[ ! -d "${HDD}" ]]; then
        echo "error: can't find mount point for local HDD backup: ${HDD}!"; exit 1
    fi
    if [[ ! -d "${DROPBOX}" ]]; then
        echo "error: can't find local Dropbox directory: ${DROPBOX}"; exit 1
    fi
}


purge_dropbox_cache () {
    if ! dropbox running; then
        dropbox stop && sleep 2
    fi
    local cache_dir="${DROPBOX}/.dropbox.cache/"
    if [[ -d "${cache_dir}" ]]; then
        echo "purging local Dropbox cache..."
        du -ah "${cache_dir}"
        rm -rf "${cache_dir}"
    else
        echo "no Dropbox cache to purge"
    fi
}


main () {
    echo "starting master backup job..."
    echo
    if [[ ! -d "${NAS}" ]]; then
        gvfs-mount smb://cgoldberg@bytez/public  # requires user in local keychain
    fi
    check_configuration
    echo "${SEP}"
    purge_dropbox_cache
    echo "${SEP}"
    sync
    echo "syncing local Dropbox to remote NAS..."
    echo
    # Note: We disable preserving permissions when rsyncing.  Rather than
    # using rsync's --archive option (which is equivalent to -rlptgoD), we
    # pass individual rsync options so the --perms option can be excluded.
    rsync \
        --delete \
        --human-readable \
        --links \
        --progress \
        --recursive \
        --safe-links \
        --stats \
        --times \
        --info=progress2 \
        "${DROPBOX}/" "${NAS}/Dropbox_Backup/"
    echo "${SEP}"
    sync
    echo "syncing remote NAS to local HDD..."
    echo
    rsync \
        --delete \
        --human-readable \
        --links \
        --progress \
        --recursive \
        --safe-links \
        --stats \
        --times \
        --info=progress2 \
        "${NAS}/" "${HDD}/"
    echo "${SEP}"
    sync
    echo "storage stats:"
    df --sync --type=ext4 --block-size=G | grep sdb
    echo "${SEP}"
    echo "done"
}

main
